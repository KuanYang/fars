{
    "collab_server" : "",
    "contents" : "#' This is a function that creates a data.frame from a csv file (can be zipped .bz2) specified using \\code{filename} argument.\n#'\n#' @param filename A character string giving the location of the csv file\n#'\n#' @return A data.frame object if the csv file exists. Otherwise the function stops with a \"file does not exist\" error.\n#'\n#' @examples\n#' \\dontrun{\n#' fars_read(\"data/accident_2013.csv\")\n#' fars_read(filename = \"data/accident_2013.csv\")\n#' }\n#'\n#' @importFrom readr read_csv\n#' @importFrom dplyr tbl_df\n#'\n#' @export\nfars_read <- function(filename) {\n        if(!file.exists(filename))\n                stop(\"file '\", filename, \"' does not exist\")\n        data <- suppressMessages({\n                readr::read_csv(filename, progress = FALSE)\n        })\n        dplyr::tbl_df(data)\n}\n\n#' This is a function that generates datafile names for each year, which can be specified with \\code{year} argument. This function is used together with \\code{\\link{fars_read}} function.\n#'\n#' @param year A character string that can be converted to an integer or an integer.\n#'\n#' @return A character string that is the file name for the data file for a specific year. The function will halt if the argument is not an integer or a character string that can be converted sucessfully to an integer.\n#'\n#' @example\n#' \\dontrun{\n#' make_filename(2013)\n#' make_filename(year=2013)\n#' }\n#'\n#' @export\nmake_filename <- function(year) {\n        year <- as.integer(year)\n        sprintf(\"%s/accident_%d.csv.bz2\", system.file(\"extdata\", package=\"fars\"), year)\n}\n\n#' This is a function that reads a lists of data input files with an argument specifying the \\code{years} to read. It uses \\code{\\link{make_filename(year)}} function internally.\n#'\n#' @param years A vector of years in integer format to read. It might stop if the argument is not in integer format.\n#'\n#' @return A list of data.frames (tibble), in which each element contains data for a year.\n#'\n#' @example\n#' \\dontrun{\n#' years = seq(2013, 2015)\n#' fars_read_years(years)\n#' fars_read_years(years=years)\n#' }\n#'\n#' @importFrom dplyr mutate select\n#'\n#' @export\nfars_read_years <- function(years) {\n        lapply(years, function(year) {\n                file <- make_filename(year)\n                tryCatch({\n                        dat <- fars_read(file)\n                        dplyr::mutate(dat, year = year) %>%\n                                dplyr::select(MONTH, year)\n                }, error = function(e) {\n                        warning(\"invalid year: \", year)\n                        return(NULL)\n                })\n        })\n}\n\n#' This is a function that generates a monthly sum for each year for the data. It uses \\code{\\link{fars_read_years(years)}} function internally.\n#'\n#' @param years A vector of years in integer format to read. It might stop if the argument is not in integer format.\n#'\n#' @return A data.frame(tibble) with monthly total for each year.\n#'\n#' @example\n#' \\dontrun{\n#' years = seq(2013, 2015)\n#' fars_summarize_years(years)\n#' fars_summarize_years(years=years)\n#' }\n#'\n#' @importFrom dplyr bind_rows group_by summarize spread\n#'\n#' @export\nfars_summarize_years <- function(years) {\n        dat_list <- fars_read_years(years)\n        dplyr::bind_rows(dat_list) %>%\n                dplyr::group_by(year, MONTH) %>%\n                dplyr::summarize(n = n()) %>%\n                tidyr::spread(year, n)\n}\n\n#' This is a function that generates a state map showing the locations of all accidents for a specific year. It uses \\code{\\link{make_filename(year)}}, \\code{\\link{fars_read(filename)}}.\n#'\n#' @param state.num The state number to generate the map for. It has to be an integer or a character string that can be converted into an integer, otherwise an error will be thrown and the function will halt. It must be present in the data files too, otherwise the function will stop and print an error message.\n#' @param year An integer or character string that can be converted into an integer.\n#'\n#' @return A state map showing the locations for all accidents for a specific state.\n#'\n#' @example\n#' \\dontrun{\n#' year = 2015\n#' fars_map_state(1, 2015)\n#' fars_map_state(state.num = 1, year = 2015)\n#' fars_map_state(state.num = \"1\", year = \"2015\")\n#' }\n#'\n#' @importFrom dplyr filter\n#' @importFrom maps map\n#' @importFrom graphics points\n#'\n#' @export\nfars_map_state <- function(state.num, year) {\n        filename <- make_filename(year)\n        data <- fars_read(filename)\n        state.num <- as.integer(state.num)\n\n        if(!(state.num %in% unique(data$STATE)))\n                stop(\"invalid STATE number: \", state.num)\n        data.sub <- dplyr::filter(data, STATE == state.num)\n        if(nrow(data.sub) == 0L) {\n                message(\"no accidents to plot\")\n                return(invisible(NULL))\n        }\n        is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900\n        is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90\n        with(data.sub, {\n                maps::map(\"state\", ylim = range(LATITUDE, na.rm = TRUE),\n                          xlim = range(LONGITUD, na.rm = TRUE))\n                graphics::points(LONGITUD, LATITUDE, pch = 46)\n        })\n}\n",
    "created" : 1500152703272.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2239365165",
    "id" : "81691C02",
    "lastKnownWriteTime" : 1500155713,
    "last_content_update" : 1500155713527,
    "path" : "~/kaggle/fars/R/fars_functions.R",
    "project_path" : "R/fars_functions.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}